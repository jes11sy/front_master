import { NextPage } from 'next'
import { useRouter } from 'next/router'
import { useState, useEffect } from 'react'
import Head from 'next/head'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Card, CardContent } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Phone, MapPin, Calendar, User, Wrench, AlertTriangle, FileText, MessageSquare, Plus, Upload, Loader2, AlertCircle } from 'lucide-react'
import apiClient from '@/lib/api'

interface Order {
  id: number
  rk: string
  city: string
  typeOrder: string
  clientName: string
  phone: string
  address: string
  dateMeeting: string
  statusOrder: string
  result: number | null
  avitoName: string | null
  avitoChatId: string | null
  typeEquipment: string
  problem: string
  note: string | null
  callId?: string | null
  bsoDoc?: string | null
  expenditureDoc?: string | null
  operator?: {
    id: number
    name: string
    login: string
  }
  master?: {
    id: number
    name: string
    cities: string
  }
}

interface Call {
  id: number
  rk: string
  city: string
  phoneClient: string
  phoneAts: string
  dateCreate: string
  status: string
  recordingPath?: string | null
  recordingUrl?: string | null
  operator?: {
    id: number
    name: string
  }
}

const OrderDetail: NextPage = () => {
  const router = useRouter()
  const { id } = router.query
  const [order, setOrder] = useState<Order | null>(null)
  const [calls, setCalls] = useState<Call[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  const [activeTab, setActiveTab] = useState('info')
  const [totalAmount, setTotalAmount] = useState('')
  const [expenseAmount, setExpenseAmount] = useState('')
  const [isUpdating, setIsUpdating] = useState(false)
  const [notifications, setNotifications] = useState<string[]>([])
  const [showModernBlock, setShowModernBlock] = useState(true)
  const [showDocumentsTab, setShowDocumentsTab] = useState(false)
  const [showCloseButton, setShowCloseButton] = useState(false)
  const [validationError, setValidationError] = useState('')
  const [isCompleted, setIsCompleted] = useState(false)
  const [cleanAmount, setCleanAmount] = useState('')
  const [masterChange, setMasterChange] = useState('')
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π –º–æ–¥–µ—Ä–Ω–∞
  const [prepayment, setPrepayment] = useState('')
  const [dateClosmod, setDateClosmod] = useState('')
  const [comment, setComment] = useState('')
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞ –ê–≤–∏—Ç–æ
  const [isLoadingChat, setIsLoadingChat] = useState(false)
  const [avitoChat, setAvitoChat] = useState<any>(null)
  const [avitoMessages, setAvitoMessages] = useState<any[]>([])
  const [showChatModal, setShowChatModal] = useState(false)
  const [newMessage, setNewMessage] = useState('')
  const [isSendingMessage, setIsSendingMessage] = useState(false)
  const [isUploadingImage, setIsUploadingImage] = useState(false)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
  const fetchCalls = async (callId: string) => {
    try {
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤–æ–Ω–∫–∏ –¥–ª—è callId:', callId)
      const response = await apiClient.getCallsByOrderId(callId)
      console.log('üìû –û—Ç–≤–µ—Ç API:', response)
      if (response.success && response.data) {
        console.log('üìû –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤–æ–Ω–∫–∏:', response.data)
        setCalls(response.data)
      } else {
        console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤–æ–Ω–∫–æ–≤:', error)
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ API
  useEffect(() => {
    const fetchOrder = async () => {
      if (!id) return
      
      try {
        setLoading(true)
        setError('')
        const response = await apiClient.getOrderById(id as string)
        
        if (response.success && response.data) {
          setOrder(response.data)
          const total = response.data.result?.toString() || ''
          const expense = response.data.expenditure?.toString() || ''
          setTotalAmount(total)
          setExpenseAmount(expense)
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤–æ–Ω–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å callId
          console.log('üìã callId –∑–∞–∫–∞–∑–∞:', response.data.callId)
          if (response.data.callId) {
            await fetchCalls(response.data.callId)
          } else {
            console.log('‚ùå –£ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç callId')
          }
          
              // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–ì–æ—Ç–æ–≤–æ", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∏ –≤—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
              if (response.data.statusOrder === '–ì–æ—Ç–æ–≤–æ') {
                setIsCompleted(true)
                const clean = response.data.clean || 0
                const masterChange = response.data.masterChange || 0
                setCleanAmount(clean.toString())
                setMasterChange(masterChange.toString())
              }
              
              // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ—Ä–Ω–∞
              setPrepayment(response.data.prepayment?.toString() || '')
              setDateClosmod(response.data.dateClosmod ? new Date(response.data.dateClosmod).toISOString().slice(0, 16) : '')
              setComment(response.data.comment || '')
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º showModernBlock –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
              setShowModernBlock(response.data.statusOrder === '–ú–æ–¥–µ—Ä–Ω')
          
          // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
          const newNotifications: string[] = []
          const totalNum = parseFloat(total) || 0
          const expenseNum = parseFloat(expense) || 0
          
          if (totalNum > 5000) {
            newNotifications.push('‚ö†Ô∏è –ò—Ç–æ–≥ –±–æ–ª—å—à–µ 5000‚ÇΩ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –î–æ–≥–æ–≤–æ—Ä')
          }
          
          if (expenseNum > 1001) {
            newNotifications.push('‚ö†Ô∏è –†–∞—Å—Ö–æ–¥ –±–æ–ª—å—à–µ 1001‚ÇΩ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —á–µ–∫ —Ä–∞—Å—Ö–æ–¥–∞')
          }
          
          setNotifications(newNotifications)
        } else {
          setError(response.error || '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        }
      } catch (error: any) {
        setError(error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞')
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
        if (error.message?.includes('401') || error.message?.includes('—Ç–æ–∫–µ–Ω')) {
          router.push('/login')
        }
        // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        if (error.message?.includes('403') || error.message?.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')) {
          router.push('/orders')
        }
      } finally {
        setLoading(false)
      }
    }

    fetchOrder()
  }, [id, router])

  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Å–∫—Ä—ã—Ç–∞—è –≤–∫–ª–∞–¥–∫–∞
  useEffect(() => {
    if (order && order.statusOrder === '–û–∂–∏–¥–∞–µ—Ç' && (activeTab === 'documents' || activeTab === 'communications')) {
      setActiveTab('info')
    } else if (order && (order.statusOrder === '–ü—Ä–∏–Ω—è–ª' || order.statusOrder === '–í –ø—É—Ç–∏') && activeTab === 'documents') {
      setActiveTab('info')
    }
  }, [order, activeTab])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
  const handleAcceptOrder = async () => {
    if (!order) return
    
    try {
      setIsUpdating(true)
      const response = await apiClient.updateOrder(order.id.toString(), {
        statusOrder: '–ü—Ä–∏–Ω—è–ª'
      })
      
      if (response.success && response.data) {
        setOrder(response.data)
      } else {
        setError(response.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞')
      }
    } catch (error: any) {
      setError(error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞')
    } finally {
      setIsUpdating(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç –∑–∞–∫–∞–∑–∞
  const handleDeclineOrder = async () => {
    if (!order) return
    
    try {
      setIsUpdating(true)
      const response = await apiClient.updateOrder(order.id.toString(), {
        statusOrder: '–û—Ç–∫–∞–∑'
      })
      
      if (response.success && response.data) {
        setOrder(response.data)
        router.push('/orders')
      } else {
        setError(response.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞')
      }
    } catch (error: any) {
      setError(error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞')
    } finally {
      setIsUpdating(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–Ω–∞
  const handleSaveModerData = async () => {
    if (!order) return
    
    setIsUpdating(true)
    try {
      const updateData = {
        prepayment: prepayment ? parseFloat(prepayment) : null,
        dateClosmod: dateClosmod ? new Date(dateClosmod + 'Z').toISOString() : null,
        comment: comment || null
      }
      
      const response = await apiClient.updateOrder(order.id.toString(), updateData)
      
      if (response.success) {
        setOrder(response.data)
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        setNotifications(['–ú–æ–¥–µ—Ä–Ω –∑–∞–ø–∏—Å–∞–Ω!'])
        setTimeout(() => setNotifications([]), 4000)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–Ω–∞:', error)
      setNotifications(['–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–Ω–∞'])
      setTimeout(() => setNotifications([]), 4000)
    } finally {
      setIsUpdating(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ –ê–≤–∏—Ç–æ
  const handleOpenAvitoChat = async () => {
    if (!order || !order.avitoChatId || !order.avitoName) {
      setNotifications(['–£ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–∞—Ç –ê–≤–∏—Ç–æ'])
      setTimeout(() => setNotifications([]), 4000)
      return
    }

    setIsLoadingChat(true)
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
      const chatResponse = await apiClient.getOrderAvitoChat(order.id.toString())
      
      if (chatResponse.success && chatResponse.data) {
        const { chat, avitoName } = chatResponse.data
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
        const messagesResponse = await apiClient.getAvitoChatMessages(
          avitoName, 
          order.avitoChatId, 
          { limit: 50, offset: 0 }
        )
        
        if (messagesResponse.success && messagesResponse.data) {
          setAvitoChat(chat)
          setAvitoMessages(messagesResponse.data)
          setShowChatModal(true)
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
          setNotifications([`–ß–∞—Ç –ê–≤–∏—Ç–æ "${avitoName}" –∑–∞–≥—Ä—É–∂–µ–Ω`])
          setTimeout(() => setNotifications([]), 4000)
        } else {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞')
        }
        
      } else {
        throw new Error(chatResponse.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞')
      }
    } catch (error: any) {
      setNotifications([`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞: ${error.message}`])
      setTimeout(() => setNotifications([]), 4000)
    } finally {
      setIsLoadingChat(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –ê–≤–∏—Ç–æ
  const handleSendMessage = async () => {
    if (!order || !order.avitoChatId || !order.avitoName || !newMessage.trim()) {
      return
    }

    setIsSendingMessage(true)
    try {
      const response = await apiClient.sendAvitoMessage(
        order.avitoName,
        order.avitoChatId,
        newMessage.trim()
      )
      
      if (response.success) {
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        setNewMessage('')
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        const messagesResponse = await apiClient.getAvitoChatMessages(
          order.avitoName,
          order.avitoChatId,
          { limit: 50, offset: 0 }
        )
        
        if (messagesResponse.success && messagesResponse.data) {
          setAvitoMessages(messagesResponse.data)
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        setNotifications(['–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'])
        setTimeout(() => setNotifications([]), 3000)
        
      } else {
        throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
      }
    } catch (error: any) {
      setNotifications([`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`])
      setTimeout(() => setNotifications([]), 4000)
    } finally {
      setIsSendingMessage(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file || !order || !order.avitoName) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      setNotifications(['–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'])
      setTimeout(() => setNotifications([]), 3000)
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (24 –ú–ë)
    if (file.size > 24 * 1024 * 1024) {
      setNotifications(['–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 24 –ú–ë'])
      setTimeout(() => setNotifications([]), 3000)
      return
    }

    setIsUploadingImage(true)
    try {
      const formData = new FormData()
      formData.append('uploadfile[]', file)

      const response = await apiClient.uploadAvitoImage(order.avitoName, formData)
      
      if (response.success && response.data) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) image_id –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const imageId = Object.keys(response.data)[0]
        
        if (imageId && order.avitoChatId) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
          const messageResponse = await apiClient.sendAvitoImageMessage(
            order.avitoName,
            order.avitoChatId,
            imageId
          )
          
          if (messageResponse.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            const messagesResponse = await apiClient.getAvitoChatMessages(
              order.avitoName,
              order.avitoChatId,
              { limit: 50, offset: 0 }
            )
            
            if (messagesResponse.success && messagesResponse.data) {
              setAvitoMessages(messagesResponse.data)
            }
            
            setNotifications(['–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'])
            setTimeout(() => setNotifications([]), 3000)
          } else {
            throw new Error(messageResponse.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
          }
        } else {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
        }
      } else {
        throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
      }
    } catch (error: any) {
      setNotifications([`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`])
      setTimeout(() => setNotifications([]), 4000)
    } finally {
      setIsUploadingImage(false)
      // –û—á–∏—â–∞–µ–º input
      event.target.value = ''
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  const handleUpdateStatus = async (newStatus: string) => {
    if (!order) return
    
    try {
      setIsUpdating(true)
      console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:', order.id, '–Ω–∞:', newStatus)
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const updateData: any = {
        statusOrder: newStatus
      }
      
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–ì–æ—Ç–æ–≤–æ", –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (newStatus === '–ì–æ—Ç–æ–≤–æ') {
        const total = parseFloat(totalAmount) || 0
        const expense = parseFloat(expenseAmount) || 0
        const clean = total - expense
        const masterChange = clean / 2
        
        updateData.result = total
        updateData.expenditure = expense
        updateData.clean = clean
        updateData.masterChange = masterChange
        
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', updateData)
      }
      
      const response = await apiClient.updateOrder(order.id.toString(), updateData)
      
      console.log('–û—Ç–≤–µ—Ç –æ—Ç API:', response)
      
      if (response.success && response.data) {
        console.log('–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', response.data)
        setOrder(response.data)
        
        if (newStatus === '–ú–æ–¥–µ—Ä–Ω') {
          setActiveTab('documents')
          setShowModernBlock(true)
        }
        
        if (newStatus === '–ì–æ—Ç–æ–≤–æ') {
          setActiveTab('documents')
          setIsCompleted(true)
          // –í—ã—á–∏—Å–ª—è–µ–º —á–∏—Å—Ç—ã–º–∏ –∏ —Å–¥–∞—á—É –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const total = parseFloat(totalAmount) || 0
          const expense = parseFloat(expenseAmount) || 0
          const clean = total - expense
          const masterChange = clean / 2
          setCleanAmount(clean.toString())
          setMasterChange(masterChange.toString())
          
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏—Ö–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü—É cash
          try {
            const cashData = {
              name: '–ø—Ä–∏—Ö–æ–¥',
              amount: masterChange,
              city: order.city,
              note: `–ò—Ç–æ–≥ –ø–æ –∑–∞–∫–∞–∑—É: ${total}‚ÇΩ`,
              paymentPurpose: `–ó–∞–∫–∞–∑ ‚Ññ${order.id}`,
              nameCreate: order.master?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä'
            }
            
            console.log('–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ cash:', cashData)
            // await apiClient.createCashEntry(cashData)
            console.log('–ü—Ä–∏—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü—É cash')
          } catch (cashError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É cash:', cashError)
          }
        }
        
        // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–û—Ç–∫–∞–∑" –∏–ª–∏ "–ù–µ–∑–∞–∫–∞–∑"
        // if (newStatus === '–û—Ç–∫–∞–∑' || newStatus === '–ù–µ–∑–∞–∫–∞–∑') {
        //   router.push('/orders')
        // }
      } else {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', response.error)
        setError(response.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞')
      }
    } catch (error: any) {
      console.error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error)
      setError(error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞')
    } finally {
      setIsUpdating(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É–º–º
  const validateAmounts = () => {
    const newNotifications: string[] = []
    
    const total = parseFloat(totalAmount) || 0
    const expense = parseFloat(expenseAmount) || 0
    
    if (total > 5000) {
      newNotifications.push('‚ö†Ô∏è –ò—Ç–æ–≥ –±–æ–ª—å—à–µ 5000‚ÇΩ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –î–æ–≥–æ–≤–æ—Ä')
    }
    
    if (expense > 1001) {
      newNotifications.push('‚ö†Ô∏è –†–∞—Å—Ö–æ–¥ –±–æ–ª—å—à–µ 1001‚ÇΩ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —á–µ–∫ —Ä–∞—Å—Ö–æ–¥–∞')
    }
    
    setNotifications(newNotifications)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  const validateRequiredFields = () => {
    if (!totalAmount.trim()) {
      setValidationError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥')
      return false
    }
    if (!expenseAmount.trim()) {
      setValidationError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥')
      return false
    }
    setValidationError('')
    return true
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—É–º–º
  useEffect(() => {
    if (totalAmount || expenseAmount) {
      validateAmounts()
    } else {
      setNotifications([])
    }
  }, [totalAmount, expenseAmount])

  const getStatusBadge = (status: string) => {
    const variants: Record<string, string> = {
      '–û–∂–∏–¥–∞–µ—Ç': 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30',
      '–ü—Ä–∏–Ω—è–ª': 'bg-blue-500/20 text-blue-300 border-blue-500/30',
      '–í –ø—É—Ç–∏': 'bg-purple-500/20 text-purple-300 border-purple-500/30',
      '–í —Ä–∞–±–æ—Ç–µ': 'bg-orange-500/20 text-orange-300 border-orange-500/30',
      '–ì–æ—Ç–æ–≤–æ': 'bg-green-500/20 text-green-300 border-green-500/30',
      '–û—Ç–∫–∞–∑': 'bg-red-500/20 text-red-300 border-red-500/30',
      '–ú–æ–¥–µ—Ä–Ω': 'bg-cyan-500/20 text-cyan-300 border-cyan-500/30',
      '–ù–µ–∑–∞–∫–∞–∑': 'bg-gray-500/20 text-gray-300 border-gray-500/30'
    }

    return (
      <Badge className={variants[status] || 'bg-gray-500/20 text-gray-300 border-gray-500/30'}>
        {status}
      </Badge>
    )
  }

  const getOrderTypeBadge = (orderType: string) => {
    const variants: Record<string, string> = {
      '–í–ø–µ—Ä–≤—ã–µ': 'bg-green-500/20 text-green-300 border-green-500/30',
      '–ü–æ–≤—Ç–æ—Ä': 'bg-blue-500/20 text-blue-300 border-blue-500/30',
      '–ì–∞—Ä–∞–Ω—Ç–∏—è': 'bg-purple-500/20 text-purple-300 border-purple-500/30'
    }

    return (
      <Badge className={variants[orderType] || 'bg-gray-500/20 text-gray-300 border-gray-500/30'}>
        {orderType}
      </Badge>
    )
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
  const renderActionButtons = () => {
    if (!order) return null

    const status = order.statusOrder
    const hasUnfulfilledRequirements = notifications.length > 0

    switch (status) {
      case '–û–∂–∏–¥–∞–µ—Ç':
        return (
          <>
            <Button 
              onClick={handleAcceptOrder}
              disabled={isUpdating}
              className="flex-1 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-semibold py-4 text-base rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 border-0"
            >
              <div className="flex items-center justify-center space-x-2">
                {isUpdating ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : (
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                )}
                <span>–ü—Ä–∏–Ω—è—Ç—å</span>
              </div>
            </Button>
            <Button 
              onClick={handleDeclineOrder}
              disabled={isUpdating}
              className="flex-1 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-semibold py-4 text-base rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 border-0"
            >
              <div className="flex items-center justify-center space-x-2">
                {isUpdating ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : (
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                )}
                <span>–û—Ç–∫–∞–∑–∞—Ç—å—Å—è</span>
              </div>
            </Button>
          </>
        )

      case '–ü—Ä–∏–Ω—è–ª':
        return (
          <Button 
            onClick={() => handleUpdateStatus('–í –ø—É—Ç–∏')}
            disabled={isUpdating}
            className="flex-1 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-semibold py-4 text-base rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 border-0"
          >
            <div className="flex items-center justify-center space-x-2">
              {isUpdating ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <div className="w-2 h-2 bg-white rounded-full"></div>
              )}
              <span>–í –ø—É—Ç–∏</span>
            </div>
          </Button>
        )

      case '–í –ø—É—Ç–∏':
        return (
          <Button 
            onClick={() => handleUpdateStatus('–í —Ä–∞–±–æ—Ç–µ')}
            disabled={isUpdating}
            className="flex-1 bg-orange-600 hover:bg-orange-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-semibold py-4 text-base rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 border-0"
          >
            <div className="flex items-center justify-center space-x-2">
              {isUpdating ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <div className="w-2 h-2 bg-white rounded-full"></div>
              )}
              <span>–í —Ä–∞–±–æ—Ç–µ</span>
            </div>
          </Button>
        )

      case '–í —Ä–∞–±–æ—Ç–µ':
        if (showCloseButton) {
          return (
            <Button 
              onClick={() => {
                if (validateRequiredFields()) {
                  const total = parseFloat(totalAmount) || 0
                  const expense = parseFloat(expenseAmount) || 0
                  const newStatus = (total === 0 && expense === 0) ? '–û—Ç–∫–∞–∑' : '–ì–æ—Ç–æ–≤–æ'
                  handleUpdateStatus(newStatus)
                }
              }}
              disabled={isUpdating || hasUnfulfilledRequirements}
              className="flex-1 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-semibold py-4 text-base rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 border-0"
            >
              <div className="flex items-center justify-center space-x-2">
                {isUpdating ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : (
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                )}
                <span>–ü—Ä–æ–≤–µ—Å—Ç–∏</span>
              </div>
            </Button>
          )
        }
        return (
          <>
            <Button 
              onClick={() => handleUpdateStatus('–ú–æ–¥–µ—Ä–Ω')}
              disabled={isUpdating || hasUnfulfilledRequirements}
              className="flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-semibold py-4 text-base rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 border-0"
            >
              <div className="flex items-center justify-center space-x-2">
                {isUpdating ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : (
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                )}
                <span>–ú–æ–¥–µ—Ä–Ω</span>
              </div>
            </Button>
            <Button 
              onClick={() => {
                setShowCloseButton(true)
                setActiveTab('documents')
              }}
              disabled={isUpdating || hasUnfulfilledRequirements}
              className="flex-1 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-semibold py-4 text-base rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 border-0"
            >
              <div className="flex items-center justify-center space-x-2">
                {isUpdating ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : (
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                )}
                <span>–ó–∞–∫—Ä—ã—Ç—å</span>
              </div>
            </Button>
          </>
        )

      case '–ú–æ–¥–µ—Ä–Ω':
        if (!showModernBlock) {
          return (
            <Button 
              onClick={() => {
                if (validateRequiredFields()) {
                  const total = parseFloat(totalAmount) || 0
                  const expense = parseFloat(expenseAmount) || 0
                  const newStatus = (total === 0 && expense === 0) ? '–û—Ç–∫–∞–∑' : '–ì–æ—Ç–æ–≤–æ'
                  handleUpdateStatus(newStatus)
                }
              }}
              disabled={isUpdating || hasUnfulfilledRequirements}
              className="flex-1 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-semibold py-4 text-base rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 border-0"
            >
              <div className="flex items-center justify-center space-x-2">
                {isUpdating ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : (
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                )}
                <span>–ü—Ä–æ–≤–µ—Å—Ç–∏</span>
              </div>
            </Button>
          )
        } else {
          return (
            <>
              <Button 
                onClick={handleSaveModerData}
                disabled={isUpdating}
                className="flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-semibold py-4 text-base rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 border-0"
              >
                <div className="flex items-center justify-center space-x-2">
                  {isUpdating ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <div className="w-2 h-2 bg-white rounded-full"></div>
                  )}
                  <span>{isUpdating ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}</span>
                </div>
              </Button>
              <Button 
                onClick={() => setShowModernBlock(false)}
                className="flex-1 bg-green-600 hover:bg-green-700 text-white font-semibold py-4 text-base rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 border-0"
              >
                <div className="flex items-center justify-center space-x-2">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                  <span>–ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑</span>
                </div>
              </Button>
            </>
          )
        }

      default:
        return null
    }
  }

  if (loading) {
    return (
      <div>
        <Head>
          <title>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞...</title>
        </Head>
        <div className="min-h-screen" style={{backgroundColor: '#114643'}}>
          <div className="flex items-center justify-center min-h-[calc(100vh-80px)]">
            <div className="flex items-center space-x-2">
              <Loader2 className="h-6 w-6 animate-spin text-green-500" />
              <div className="text-white text-lg">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞...</div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div>
        <Head>
          <title>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞</title>
        </Head>
        <div className="min-h-screen" style={{backgroundColor: '#114643'}}>
          <div className="flex items-center justify-center min-h-[calc(100vh-80px)]">
            <div className="text-center">
              <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
              <div className="text-red-300 text-lg mb-4">{error}</div>
              <Button 
                onClick={() => router.push('/orders')}
                className="bg-green-600 hover:bg-green-700 text-white"
              >
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
              </Button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (!order) {
    return (
      <div>
        <Head>
          <title>–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</title>
        </Head>
        <div className="min-h-screen" style={{backgroundColor: '#114643'}}>
          <div className="flex items-center justify-center min-h-[calc(100vh-80px)]">
            <div className="text-center">
              <div className="text-white text-xl mb-4">–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
              <Button onClick={() => router.push('/orders')} className="bg-green-600 hover:bg-green-700">
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑–∞–º
              </Button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div>
      <Head>
        <title>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</title>
      </Head>
      <div className="min-h-screen" style={{backgroundColor: '#114643'}}>
        
        <div className="container mx-auto px-2 sm:px-4 py-8 pt-4 md:pt-8">
          <div className="max-w-none mx-auto">
            <div className="backdrop-blur-lg shadow-2xl rounded-2xl p-6 md:p-16 border bg-white/95 hover:bg-white transition-all duration-500 hover:shadow-3xl transform hover:scale-[1.01] animate-fade-in" style={{borderColor: '#114643'}}>
              
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
              <div className="mb-8">
                <div className="text-center">
                  <h1 className="text-4xl font-bold text-gray-800 mb-4">
                    –ó–∞–∫–∞–∑ ‚Ññ{order.id}
                  </h1>
                </div>
              </div>

              {/* –í–∫–ª–∞–¥–∫–∏ */}
              <Card className="bg-white border-gray-200 shadow-lg">
                <div className="border-b border-gray-200">
                  <nav className="flex space-x-2 sm:space-x-4 lg:space-x-8 px-2 sm:px-4 lg:px-6 overflow-x-auto">
                    <button
                      onClick={() => setActiveTab('info')}
                      className={`py-3 sm:py-4 px-2 sm:px-1 border-b-2 font-medium text-xs sm:text-sm transition-colors whitespace-nowrap flex-shrink-0 ${
                        activeTab === 'info'
                          ? 'border-teal-500 text-teal-600'
                          : 'border-transparent text-gray-600 hover:text-teal-600 hover:border-gray-300'
                      }`}
                    >
                      <div className="flex items-center space-x-1 sm:space-x-2">
                        <User className="h-3 w-3 sm:h-4 sm:w-4" />
                        <span className="hidden sm:inline">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É</span>
                        <span className="sm:hidden">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
                      </div>
                    </button>
                {(order.statusOrder === '–í —Ä–∞–±–æ—Ç–µ' && showCloseButton) || (order.statusOrder !== '–û–∂–∏–¥–∞–µ—Ç' && order.statusOrder !== '–ü—Ä–∏–Ω—è–ª' && order.statusOrder !== '–í –ø—É—Ç–∏' && order.statusOrder !== '–í —Ä–∞–±–æ—Ç–µ') && (
                  <button
                    onClick={() => setActiveTab('documents')}
                      className={`py-3 sm:py-4 px-2 sm:px-1 border-b-2 font-medium text-xs sm:text-sm transition-colors whitespace-nowrap flex-shrink-0 ${
                        activeTab === 'documents'
                          ? 'border-teal-500 text-teal-600'
                          : 'border-transparent text-gray-600 hover:text-teal-600 hover:border-gray-300'
                      }`}
                  >
                    <div className="flex items-center space-x-1 sm:space-x-2">
                      <FileText className="h-3 w-3 sm:h-4 sm:w-4" />
                      <span>–ò—Ç–æ–≥</span>
                    </div>
                  </button>
                )}
                {order.statusOrder !== '–û–∂–∏–¥–∞–µ—Ç' && (
                  <button
                    onClick={() => setActiveTab('communications')}
                    className={`py-3 sm:py-4 px-2 sm:px-1 border-b-2 font-medium text-xs sm:text-sm transition-colors whitespace-nowrap flex-shrink-0 ${
                      activeTab === 'communications'
                        ? 'border-teal-500 text-teal-600'
                        : 'border-transparent text-gray-600 hover:text-teal-600 hover:border-gray-300'
                    }`}
                  >
                    <div className="flex items-center space-x-1 sm:space-x-2">
                      <MessageSquare className="h-3 w-3 sm:h-4 sm:w-4" />
                      <span className="hidden sm:inline">–ó–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤ / –ß–∞—Ç –ê–≤–∏—Ç–æ</span>
                      <span className="sm:hidden">–ó–≤–æ–Ω–∫–∏ / –ß–∞—Ç</span>
                    </div>
                  </button>
                )}
              </nav>
            </div>

            <CardContent className="p-6">
              {/* –í–∫–ª–∞–¥–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É */}
              {activeTab === 'info' && (
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-semibold text-gray-800 mb-4">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                      <div className="space-y-3">
                        <div className="flex items-center space-x-3">
                          <div className="text-lg">üè¢</div>
                          <div>
                            <p className="text-sm text-gray-600">–†–ö</p>
                            <p className="text-gray-800 font-medium">{order.rk}</p>
                          </div>
                        </div>
                        
                        <div className="flex items-center space-x-3">
                          <div className="text-lg">üèôÔ∏è</div>
                          <div>
                            <p className="text-sm text-gray-600">–ì–æ—Ä–æ–¥</p>
                            <p className="text-gray-800 font-medium">{order.city}</p>
                          </div>
                        </div>
                        
                        <div className="flex items-center space-x-3">
                          <div className="text-lg">üë®‚Äçüîß</div>
                          <div>
                            <p className="text-sm text-gray-600">–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞</p>
                            <p className="text-gray-800 font-medium">{order.avitoName || order.rk}</p>
                          </div>
                        </div>
                        
                        <div className="flex items-center space-x-3">
                          <div className="text-lg">üìù</div>
                          <div>
                            <p className="text-sm text-gray-600">–¢–∏–ø –∑–∞–∫–∞–∑–∞</p>
                            <div className="mt-1">{getOrderTypeBadge(order.typeOrder)}</div>
                          </div>
                        </div>
                        
                        <div className="flex items-center space-x-3">
                          <div className="text-lg">üìä</div>
                          <div>
                            <p className="text-sm text-gray-600">–°—Ç–∞—Ç—É—Å</p>
                            <div className="mt-1">{getStatusBadge(order.statusOrder)}</div>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-semibold text-white mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</h3>
                      <div className="space-y-3">
                        <div className="flex items-center space-x-3">
                          <div className="text-lg">üë§</div>
                          <div>
                            <p className="text-sm text-gray-600">–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞</p>
                            <p className="text-gray-800 font-medium">{order.clientName}</p>
                          </div>
                        </div>
                        
                        <div className="flex items-center space-x-3">
                          <Phone className="h-4 w-4 text-gray-600" />
                          <div>
                            <p className="text-sm text-gray-600">–¢–µ–ª–µ—Ñ–æ–Ω</p>
                            <p className="text-gray-800 font-medium">{order.phone}</p>
                          </div>
                        </div>
                        
                        <div className="flex items-start space-x-3">
                          <MapPin className="h-4 w-4 text-gray-600 mt-1" />
                          <div className="flex-1">
                            <p className="text-sm text-gray-600">–ê–¥—Ä–µ—Å</p>
                            <p className="text-gray-800 font-medium">{order.address}</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                  <div className="pt-6 border-t border-gray-700">
                    <h3 className="text-lg font-semibold text-white mb-4">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="flex items-center space-x-3">
                        <div className="text-lg">üîß</div>
                        <div>
                          <p className="text-sm text-gray-600">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</p>
                          <p className="text-gray-800 font-medium">{order.typeEquipment}</p>
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-3">
                        <Calendar className="h-4 w-4 text-gray-600" />
                        <div>
                          <p className="text-sm text-gray-600">–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏</p>
                          <p className="text-gray-800 font-medium">{new Date(order.dateMeeting).toLocaleDateString('ru-RU', {
                            day: '2-digit',
                            month: '2-digit',
                            year: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit',
                            timeZone: 'UTC'
                          })}</p>
                        </div>
                      </div>
                    </div>
                    
                    <div className="mt-4">
                      <div className="flex items-start space-x-3">
                        <AlertTriangle className="h-4 w-4 text-gray-600 mt-1" />
                        <div className="flex-1">
                          <p className="text-sm text-gray-600">–ü—Ä–æ–±–ª–µ–º–∞</p>
                          <p className="text-gray-800 font-medium">{order.problem}</p>
                        </div>
                      </div>
                    </div>
                    
                    {order.note && (
                      <div className="mt-4">
                        <div className="flex items-start space-x-3">
                          <div className="text-lg">üìù</div>
                          <div className="flex-1">
                            <p className="text-sm text-gray-600">–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</p>
                            <p className="text-white font-medium whitespace-pre-line text-sm">{order.note}</p>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* –í–∫–ª–∞–¥–∫–∞: –°—É–º–º–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã */}
              {activeTab === 'documents' && ((order.statusOrder === '–í —Ä–∞–±–æ—Ç–µ' && showCloseButton) || (order.statusOrder !== '–û–∂–∏–¥–∞–µ—Ç' && order.statusOrder !== '–ü—Ä–∏–Ω—è–ª' && order.statusOrder !== '–í –ø—É—Ç–∏' && order.statusOrder !== '–í —Ä–∞–±–æ—Ç–µ')) && (
                <div className="space-y-6">
                  {/* –ë–ª–æ–∫ –º–æ–¥–µ—Ä–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ –ú–æ–¥–µ—Ä–Ω –∏ —Ñ–ª–∞–≥–µ showModernBlock */}
                  {order.statusOrder === '–ú–æ–¥–µ—Ä–Ω' && showModernBlock && (
                    <div className="space-y-4 p-4 bg-purple-500/10 border border-purple-500/30 rounded-lg">
                      <h3 className="text-lg font-semibold text-white mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–æ–¥–µ—Ä–Ω—É</h3>
                      
                      <div className="space-y-4">
                        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–Ω–∞ */}
                        {notifications.length > 0 && (
                          <div className="space-y-2">
                            {notifications.map((notification, index) => (
                              <div key={index} className={`p-3 rounded-lg border ${
                                notification.includes('–ú–æ–¥–µ—Ä–Ω –∑–∞–ø–∏—Å–∞–Ω') 
                                  ? 'bg-green-500/10 border-green-500/30 text-green-300' 
                                  : 'bg-red-500/10 border-red-500/30 text-red-300'
                              }`}>
                                <p className="text-sm font-medium text-center">{notification}</p>
                              </div>
                            ))}
                          </div>
                        )}
                        
                        <div className="space-y-2">
                          <Label htmlFor="prepayment" className="text-white font-medium">–°—É–º–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã</Label>
                          <div className="relative">
                            <Input
                              id="prepayment"
                              type="number"
                              placeholder="0"
                              value={prepayment}
                              onChange={(e) => setPrepayment(e.target.value)}
                              className="bg-gray-700/50 border-gray-600 text-white placeholder-gray-400 pr-8"
                            />
                            <span className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-600 text-sm">‚ÇΩ</span>
                          </div>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="closingDate" className="text-white font-medium">–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è</Label>
                          <Input
                            id="closingDate"
                            type="datetime-local"
                            value={dateClosmod}
                            onChange={(e) => setDateClosmod(e.target.value)}
                            className="bg-gray-700/50 border-gray-600 text-white"
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="comment" className="text-white font-medium">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</Label>
                          <textarea
                            id="comment"
                            rows={4}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
                            value={comment}
                            onChange={(e) => setComment(e.target.value)}
                            className="w-full px-3 py-2 bg-gray-700/50 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          />
                        </div>
                      </div>
                      
                    </div>
                  )}

                  {/* –ü–æ–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –µ—Å–ª–∏ –ù–ï —Å—Ç–∞—Ç—É—Å –ú–æ–¥–µ—Ä–Ω –∏–ª–∏ –±–ª–æ–∫ –º–æ–¥–µ—Ä–Ω–∞ —Å–∫—Ä—ã—Ç */}
                  {(order.statusOrder !== '–ú–æ–¥–µ—Ä–Ω' || !showModernBlock) && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-2">
                        <Label htmlFor="total" className="text-white font-medium">–ò—Ç–æ–≥</Label>
                        <div className="relative">
                          <Input
                            id="total"
                            type="number"
                            placeholder="0"
                            value={totalAmount}
                            onChange={(e) => setTotalAmount(e.target.value)}
                            disabled={isCompleted || order.statusOrder === '–ì–æ—Ç–æ–≤–æ'}
                            className={`bg-gray-700/50 border-gray-600 text-white placeholder-gray-400 pr-8 ${(isCompleted || order.statusOrder === '–ì–æ—Ç–æ–≤–æ') ? 'opacity-50 cursor-not-allowed' : ''}`}
                          />
                          <span className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-600 text-sm">‚ÇΩ</span>
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="expense" className="text-white font-medium">–†–∞—Å—Ö–æ–¥</Label>
                        <div className="relative">
                          <Input
                            id="expense"
                            type="number"
                            placeholder="0"
                            value={expenseAmount}
                            onChange={(e) => setExpenseAmount(e.target.value)}
                            disabled={isCompleted || order.statusOrder === '–ì–æ—Ç–æ–≤–æ'}
                            className={`bg-gray-700/50 border-gray-600 text-white placeholder-gray-400 pr-8 ${(isCompleted || order.statusOrder === '–ì–æ—Ç–æ–≤–æ') ? 'opacity-50 cursor-not-allowed' : ''}`}
                          />
                          <span className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-600 text-sm">‚ÇΩ</span>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* –¢–µ–∫—Å—Ç "–ß–∏—Å—Ç—ã–º–∏" –∏ "–°–¥–∞—á–∞ –º–∞—Å—Ç–µ—Ä–∞" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–ì–æ—Ç–æ–≤–æ" */}
                  {(isCompleted || order.statusOrder === '–ì–æ—Ç–æ–≤–æ') && (
                    <div className="pt-4 border-t border-gray-700">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-2">
                          <p className="text-white font-medium">–ß–∏—Å—Ç—ã–º–∏:</p>
                          <p className="text-green-400 text-lg font-semibold">{cleanAmount}‚ÇΩ</p>
                        </div>
                        
                        <div className="space-y-2">
                          <p className="text-white font-medium">–°–¥–∞—á–∞ –º–∞—Å—Ç–µ—Ä–∞:</p>
                          <p className="text-blue-400 text-lg font-semibold">{masterChange}‚ÇΩ</p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –µ—Å–ª–∏ –ù–ï —Å—Ç–∞—Ç—É—Å –ú–æ–¥–µ—Ä–Ω –∏–ª–∏ –±–ª–æ–∫ –º–æ–¥–µ—Ä–Ω–∞ —Å–∫—Ä—ã—Ç */}
                  {(order.statusOrder !== '–ú–æ–¥–µ—Ä–Ω' || !showModernBlock) && notifications.length > 0 && (
                    <div className="space-y-2">
                      {notifications.map((notification, index) => (
                        <div key={index} className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-3">
                          <p className="text-yellow-300 text-sm font-medium">{notification}</p>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* –î–æ–∫—É–º–µ–Ω—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –µ—Å–ª–∏ –ù–ï —Å—Ç–∞—Ç—É—Å –ú–æ–¥–µ—Ä–Ω –∏–ª–∏ –±–ª–æ–∫ –º–æ–¥–µ—Ä–Ω–∞ —Å–∫—Ä—ã—Ç */}
                  {(order.statusOrder !== '–ú–æ–¥–µ—Ä–Ω' || !showModernBlock) && (
                    <div className="space-y-4">
                      <h3 className="text-lg font-semibold text-white">–î–æ–∫—É–º–µ–Ω—Ç—ã</h3>
                      <div className="space-y-3">
                        <div className="p-4 bg-gray-700/30 rounded-lg">
                          <div className="flex items-center justify-between mb-3">
                            <div className="flex items-center space-x-3">
                              <div className="text-lg">üìÑ</div>
                              <span className="text-white font-medium">–î–æ–≥–æ–≤–æ—Ä</span>
                            </div>
                            {order.statusOrder !== '–ì–æ—Ç–æ–≤–æ' && order.statusOrder !== '–ù–µ–∑–∞–∫–∞–∑' && order.statusOrder !== '–û—Ç–∫–∞–∑' && (
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="bg-gray-600 border-gray-500 text-white hover:bg-gray-500"
                              >
                                <Upload className="h-4 w-4 mr-1" />
                                –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å
                              </Button>
                            )}
                          </div>
                          <div className="text-sm text-gray-600">
                            {order.bsoDoc ? (
                              <span className="text-green-400">üìé {order.bsoDoc}</span>
                            ) : (
                              '–§–∞–π–ª –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω'
                            )}
                          </div>
                        </div>
                        
                        <div className="p-4 bg-gray-700/30 rounded-lg">
                          <div className="flex items-center justify-between mb-3">
                            <div className="flex items-center space-x-3">
                              <div className="text-lg">üßæ</div>
                              <span className="text-white font-medium">–ß–µ–∫ —Ä–∞—Å—Ö–æ–¥–∞</span>
                            </div>
                            {order.statusOrder !== '–ì–æ—Ç–æ–≤–æ' && order.statusOrder !== '–ù–µ–∑–∞–∫–∞–∑' && order.statusOrder !== '–û—Ç–∫–∞–∑' && (
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="bg-gray-600 border-gray-500 text-white hover:bg-gray-500"
                              >
                                <Upload className="h-4 w-4 mr-1" />
                                –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å
                              </Button>
                            )}
                          </div>
                          <div className="text-sm text-gray-600">
                            {order.expenditureDoc ? (
                              <span className="text-green-400">üìé {order.expenditureDoc}</span>
                            ) : (
                              '–§–∞–π–ª –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω'
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                </div>
              )}

              {/* –í–∫–ª–∞–¥–∫–∞: –ó–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤ / –ß–∞—Ç –ê–≤–∏—Ç–æ */}
              {activeTab === 'communications' && order.statusOrder !== '–û–∂–∏–¥–∞–µ—Ç' && (
                <div className="space-y-6">
                  {/* –ó–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤ */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-white">–ó–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤</h3>
                    <div className="space-y-3">
                      {calls.length > 0 ? (
                        calls.map((call) => (
                          <div key={call.id} className="p-3 sm:p-4 bg-gray-700/30 rounded-lg">
                            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-3 space-y-2 sm:space-y-0">
                              <div className="flex items-center space-x-2">
                                <Phone className="h-4 w-4 text-green-400 flex-shrink-0" />
                                <span className="text-white font-medium text-sm sm:text-base">
                                  {call.status === 'incoming' ? '–í—Ö–æ–¥—è—â–∏–π' : '–ò—Å—Ö–æ–¥—è—â–∏–π'} –∑–≤–æ–Ω–æ–∫
                                </span>
                              </div>
                              <span className="text-xs sm:text-sm text-gray-600">
                                {new Date(call.dateCreate).toLocaleString('ru-RU')}
                              </span>
                            </div>
                            <div className="space-y-1 mb-3">
                              <p className="text-xs sm:text-sm text-gray-300">
                                –ö–ª–∏–µ–Ω—Ç: {call.phoneClient}
                              </p>
                              <p className="text-xs sm:text-sm text-gray-300">
                                –û–ø–µ—Ä–∞—Ç–æ—Ä: {call.operator?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                              </p>
                            </div>
                            {call.recordingUrl && (
                              <div className="mt-3">
                                <audio 
                                  controls 
                                  className="w-full h-10 sm:h-12"
                                  style={{ 
                                    background: 'rgba(55, 65, 81, 0.5)',
                                    borderRadius: '8px'
                                  }}
                                >
                                  <source src={call.recordingUrl} type="audio/mpeg" />
                                  –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç.
                                </audio>
                              </div>
                            )}
                          </div>
                        ))
                      ) : (
                        <div className="p-4 bg-gray-700/30 rounded-lg text-center">
                          <p className="text-gray-600">–ó–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* –ß–∞—Ç –ê–≤–∏—Ç–æ */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-white">–ß–∞—Ç –ê–≤–∏—Ç–æ</h3>
                    {order.avitoChatId && order.avitoName ? (
                      <Button
                        onClick={handleOpenAvitoChat}
                        disabled={isLoadingChat}
                        className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white p-4 h-auto"
                      >
                        <div className="flex items-center justify-center space-x-3">
                          {isLoadingChat ? (
                            <Loader2 className="h-5 w-5 animate-spin" />
                          ) : (
                            <MessageSquare className="h-5 w-5" />
                          )}
                          <div className="text-left">
                            <div className="font-semibold">
                              {isLoadingChat ? '–ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç...' : '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç –ê–≤–∏—Ç–æ'}
                            </div>
                          </div>
                        </div>
                      </Button>
                    ) : (
                      <div className="p-4 bg-gray-700/30 rounded-lg text-center">
                        <div className="flex items-center justify-center space-x-2 mb-2">
                          <MessageSquare className="h-5 w-5 text-gray-600" />
                          <span className="text-gray-600 font-medium">–ß–∞—Ç –ê–≤–∏—Ç–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</span>
                        </div>
                        <p className="text-gray-500 text-sm">
                          –£ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω ID —á–∞—Ç–∞ –ê–≤–∏—Ç–æ –∏–ª–∏ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
        
        {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ */}
        <div className="fixed bottom-0 left-0 right-0 p-4 z-50">
          <div className="max-w-md mx-auto">
            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö */}
            {notifications.length > 0 && order?.statusOrder === '–í —Ä–∞–±–æ—Ç–µ' && (
              <div className="mb-3 p-3 bg-red-500/10 border border-red-500/30 rounded-lg">
                <p className="text-red-300 text-sm font-medium text-center">
                  ‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                </p>
              </div>
            )}
            
            {/* –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
            {validationError && (
              <div className="mb-3 p-3 bg-red-500/10 border border-red-500/30 rounded-lg">
                <p className="text-red-300 text-sm font-medium text-center">
                  ‚ö†Ô∏è {validationError}
                </p>
              </div>
            )}
            
            <div className="flex space-x-3 w-full">
              {renderActionButtons()}
            </div>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–∞—Ç–∞ –ê–≤–∏—Ç–æ */}
      {showChatModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-gray-800 rounded-lg w-full max-w-4xl h-[80vh] flex flex-col">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700">
              <div className="flex items-center space-x-3">
                <MessageSquare className="h-5 w-5 text-blue-400" />
                <div>
                  <h3 className="text-lg font-semibold text-white">–ß–∞—Ç –ê–≤–∏—Ç–æ</h3>
                </div>
              </div>
              <Button
                onClick={() => setShowChatModal(false)}
                size="sm"
                className="bg-green-600 hover:bg-green-700 text-white border-0"
              >
                ‚úï
              </Button>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ */}
            {avitoChat && (
              <div className="p-4 border-b border-gray-700 bg-gray-700/30">
                <div className="flex items-center space-x-4">
                  {avitoChat.users && avitoChat.users.length > 0 && (
                    <div className="flex items-center space-x-2">
                      <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                        <span className="text-white text-sm font-medium">
                          {avitoChat.users[0].name?.charAt(0) || '?'}
                        </span>
                      </div>
                      <div>
                        <p className="text-white font-medium">
                          {avitoChat.users[0].name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                        </p>
                      </div>
                    </div>
                  )}
                  {avitoChat.context?.value && (
                    <div className="ml-auto text-right">
                      <p className="text-white font-medium text-sm">
                        {avitoChat.context.value.title}
                      </p>
                      {avitoChat.context.value.price_string && (
                        <p className="text-green-400 text-sm">
                          {avitoChat.context.value.price_string}
                        </p>
                      )}
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ */}
            <div className="flex-1 overflow-y-auto p-4 space-y-3">
              {avitoMessages.length > 0 ? (
                avitoMessages.map((message, index) => (
                  <div
                    key={message.id || index}
                    className={`flex ${message.direction === 'out' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`max-w-[70%] p-3 rounded-lg ${
                        message.direction === 'out'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-700 text-white'
                      }`}
                    >
                      <div className="text-sm">
                        {message.content?.text && (
                          <p className="whitespace-pre-wrap">{message.content.text}</p>
                        )}
                        {message.content?.image && (
                          <div className="mt-2">
                            <img
                              src={message.content.image.sizes?.['640x480'] || message.content.image.sizes?.['140x105']}
                              alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                              className="max-w-full h-auto rounded cursor-pointer hover:opacity-80 transition-opacity"
                              onClick={() => {
                                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                                const imageUrl = message.content.image.sizes?.['1280x960'] || 
                                               message.content.image.sizes?.['640x480'] || 
                                               message.content.image.sizes?.['140x105']
                                if (imageUrl) {
                                  window.open(imageUrl, '_blank')
                                }
                              }}
                            />
                          </div>
                        )}
                        {message.content?.voice && (
                          <div className="mt-2 p-3 bg-gray-600 rounded-lg">
                            <div className="flex items-center space-x-3">
                              <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                                <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                                  <path fillRule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM15.657 6.343a1 1 0 011.414 0A9.972 9.972 0 0119 12a9.972 9.972 0 01-1.929 5.657 1 1 0 01-1.414-1.414A7.971 7.971 0 0017 12a7.971 7.971 0 00-1.343-4.243 1 1 0 010-1.414z" clipRule="evenodd" />
                                </svg>
                              </div>
                              <div className="flex-1">
                                <p className="text-white font-medium">–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</p>
                                <p className="text-gray-600 text-xs">ID: {message.content.voice.voice_id}</p>
                              </div>
                              <button className="text-green-400 hover:text-green-300">
                                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd" />
                                </svg>
                              </button>
                            </div>
                          </div>
                        )}
                        {message.content?.call && (
                          <div className="mt-2 p-3 bg-gray-600 rounded-lg">
                            <div className="flex items-center space-x-3">
                              <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                                <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                                  <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
                                </svg>
                              </div>
                              <div className="flex-1">
                                <p className="text-white font-medium">–ó–≤–æ–Ω–æ–∫</p>
                                <p className="text-gray-600 text-xs">
                                  {message.content.call.status === 'missed' ? '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π' : '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π'}
                                </p>
                              </div>
                            </div>
                          </div>
                        )}
                        {message.content?.item && (
                          <div className="mt-2 p-2 bg-gray-600 rounded">
                            <p className="font-medium">{message.content.item.title}</p>
                            {message.content.item.price_string && (
                              <p className="text-green-400">{message.content.item.price_string}</p>
                            )}
                          </div>
                        )}
                      </div>
                      <div className="text-xs opacity-70 mt-1">
                        {new Date(message.created * 1000).toLocaleString('ru-RU')}
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center text-gray-600 py-8">
                  <MessageSquare className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                </div>
              )}
            </div>

            {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */}
            <div className="p-4 border-t border-gray-700">
              <div className="flex space-x-3">
                <Input
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                  className="flex-1 bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-green-500"
                  onKeyPress={(e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                      e.preventDefault()
                      handleSendMessage()
                    }
                  }}
                  disabled={isSendingMessage || isUploadingImage}
                />
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleImageUpload}
                  className="hidden"
                  id="image-upload"
                  disabled={isUploadingImage}
                />
                <label
                  htmlFor="image-upload"
                  className={`inline-flex items-center justify-center px-4 py-2 rounded-lg cursor-pointer transition-colors ${
                    isUploadingImage
                      ? 'bg-gray-600 cursor-not-allowed'
                      : 'bg-blue-600 hover:bg-blue-700'
                  } text-white`}
                >
                  {isUploadingImage ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                  )}
                </label>
                <Button
                  onClick={handleSendMessage}
                  disabled={!newMessage.trim() || isSendingMessage || isUploadingImage}
                  className="bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white px-6"
                >
                  {isSendingMessage ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <MessageSquare className="h-4 w-4" />
                  )}
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}
        </div>
      </div>
    </div>
  )
}

export default OrderDetail
