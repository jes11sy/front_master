// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–µ–Ω–¥–æ–º
import { logger } from './logger'

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'https://api.test-shem.ru/api/v1'

interface ApiResponse<T> {
  success: boolean
  data?: T
  error?: string
  message?: string
}

class ApiClient {
  private baseURL: string
  private token: string | null = null
  private refreshToken: string | null = null
  private isRefreshing: boolean = false
  private refreshSubscribers: Array<(token: string) => void> = []

  constructor(baseURL: string) {
    this.baseURL = baseURL
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ localStorage –∏–ª–∏ sessionStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (typeof window !== 'undefined') {
      this.token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token')
      this.refreshToken = localStorage.getItem('refresh_token') || sessionStorage.getItem('refresh_token')
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      this.startTokenExpiryCheck()
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  private startTokenExpiryCheck() {
    if (typeof window === 'undefined') return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
      if (!this.token) return

      try {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        const base64Url = this.token.split('.')[1]
        if (!base64Url) return

        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')
        const jsonPayload = decodeURIComponent(
          atob(base64)
            .split('')
            .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
            .join('')
        )

        const payload = JSON.parse(jsonPayload)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω
        if (payload.exp) {
          const expiryTime = payload.exp * 1000 // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
          const currentTime = Date.now()
          const timeUntilExpiry = expiryTime - currentTime

          // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –∏–ª–∏ –º–µ–Ω—å—à–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ
          if (timeUntilExpiry > 0 && timeUntilExpiry < 2 * 60 * 1000) {
            console.log('‚è∞ –¢–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç, –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º...')
            this.refreshAccessToken().catch(err => {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', err)
            })
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
      }
    }, 60000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  setToken(token: string, remember: boolean = false) {
    this.token = token
    if (typeof window !== 'undefined') {
      if (remember) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        localStorage.setItem('auth_token', token)
        localStorage.setItem('remember_me', 'true')
      } else {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ sessionStorage –¥–ª—è —Å–µ—Å—Å–∏–∏
        sessionStorage.setItem('auth_token', token)
        localStorage.removeItem('auth_token')
        localStorage.removeItem('remember_me')
      }
    }
  }

  setRefreshToken(refreshToken: string, remember: boolean = false) {
    this.refreshToken = refreshToken
    if (typeof window !== 'undefined') {
      if (remember) {
        localStorage.setItem('refresh_token', refreshToken)
      } else {
        sessionStorage.setItem('refresh_token', refreshToken)
        localStorage.removeItem('refresh_token')
      }
    }
  }

  clearToken() {
    this.token = null
    this.refreshToken = null
    if (typeof window !== 'undefined') {
      localStorage.removeItem('auth_token')
      localStorage.removeItem('refresh_token')
      localStorage.removeItem('remember_me')
      localStorage.removeItem('user')
      sessionStorage.removeItem('auth_token')
      sessionStorage.removeItem('refresh_token')
      sessionStorage.removeItem('user')
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é refresh —Ç–æ–∫–µ–Ω–∞
  private async refreshAccessToken(): Promise<string | null> {
    if (!this.refreshToken) {
      return null
    }

    try {
      const response = await fetch(`${this.baseURL}/auth/refresh`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ refreshToken: this.refreshToken }),
      })

      if (!response.ok) {
        throw new Error('Failed to refresh token')
      }

      const data = await response.json()
      
      if (data.success && data.data?.accessToken) {
        const remember = typeof window !== 'undefined' && localStorage.getItem('remember_me') === 'true'
        this.setToken(data.data.accessToken, remember)
        
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ç–æ–∂–µ
        if (data.data.refreshToken) {
          this.setRefreshToken(data.data.refreshToken, remember)
        }
        
        return data.data.accessToken
      }

      return null
    } catch (error) {
      console.error('Error refreshing token:', error)
      return null
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  private subscribeTokenRefresh(callback: (token: string) => void) {
    this.refreshSubscribers.push(callback)
  }

  // –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ
  private onTokenRefreshed(token: string) {
    this.refreshSubscribers.forEach(callback => callback(token))
    this.refreshSubscribers = []
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {},
    retries: number = 3,
    isRetryAfterRefresh: boolean = false
  ): Promise<ApiResponse<T>> {
    const url = `${this.baseURL}${endpoint}`
    
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      ...(options.headers as Record<string, string>),
    }

    if (this.token) {
      headers.Authorization = `Bearer ${this.token}`
    }

    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        const response = await fetch(url, {
          ...options,
          headers,
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
          signal: AbortSignal.timeout(15000), // 15 —Å–µ–∫—É–Ω–¥
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è JSON
        const contentType = response.headers.get('content-type')
        if (!contentType || !contentType.includes('application/json')) {
          throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞')
        }

        const data = await response.json()

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 401 –æ—à–∏–±–∫—É - –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        if (response.status === 401 && !isRetryAfterRefresh && endpoint !== '/auth/refresh' && endpoint !== '/auth/login') {
          console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∞ 401 –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...')
          
          // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
          if (this.isRefreshing) {
            return new Promise<ApiResponse<T>>((resolve, reject) => {
              this.subscribeTokenRefresh((newToken: string) => {
                // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                this.request<T>(endpoint, options, retries, true)
                  .then(resolve)
                  .catch(reject)
              })
            })
          }

          this.isRefreshing = true

          try {
            const newToken = await this.refreshAccessToken()
            
            if (newToken) {
              console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
              this.isRefreshing = false
              this.onTokenRefreshed(newToken)
              
              // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
              return this.request<T>(endpoint, options, retries, true)
            } else {
              console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω')
              this.isRefreshing = false
              this.clearToken()
              
              // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
              if (typeof window !== 'undefined') {
                window.location.href = '/login'
              }
              
              // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å toast
              throw new Error('SESSION_EXPIRED')
            }
          } catch (refreshError: any) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', refreshError?.message || refreshError)
            this.isRefreshing = false
            this.clearToken()
            
            if (typeof window !== 'undefined') {
              window.location.href = '/login'
            }
            
            // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å toast
            throw new Error('SESSION_EXPIRED')
          }
        }

        if (!response.ok) {
          throw new Error(data.error || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`)
        }

        return data
      } catch (error: any) {
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏, —Å—Ä–∞–∑—É –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if (error.message === 'SESSION_EXPIRED') {
          throw error
        }
        
        // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
        if (attempt === 1) {
          console.error(`API Error (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}):`, error)
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if (attempt === retries) {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
          if (error.name === 'AbortError') {
            throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
          }
          
          if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
            throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω')
          }
          
          if (error.message?.includes('CORS')) {
            throw new Error('–û—à–∏–±–∫–∞ CORS. –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ preflight –∑–∞–ø—Ä–æ—Å—ã')
          }
          
          throw error
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        const delay = Math.min(1000 * Math.pow(2, attempt - 1), 5000) // Exponential backoff, max 5s
        console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}ms...`)
        await new Promise(resolve => setTimeout(resolve, delay))
      }
    }
    
    throw new Error('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã')
  }

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  async login(login: string, password: string, remember: boolean = false) {
    const response = await this.request<{
      user: any
      accessToken: string
      refreshToken: string
    }>('/auth/login', {
      method: 'POST',
      body: JSON.stringify({ 
        login, 
        password, 
        role: 'master' // Master —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–æ–ª—å master
      }),
    })

    // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: { success, message, data: { user, accessToken, refreshToken } }
    if (response.success && response.data?.accessToken) {
      this.setToken(response.data.accessToken, remember)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh —Ç–æ–∫–µ–Ω
      if (response.data.refreshToken) {
        this.setRefreshToken(response.data.refreshToken, remember)
      }
    }

    return response
  }

  logout() {
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ù–ê–ü–†–Ø–ú–£–Æ –∏ –°–ò–ù–•–†–û–ù–ù–û
    if (typeof window !== 'undefined') {
      localStorage.removeItem('auth_token')
      localStorage.removeItem('refresh_token')
      localStorage.removeItem('remember_me')
      localStorage.removeItem('user')
      sessionStorage.removeItem('auth_token')
      sessionStorage.removeItem('refresh_token')
      sessionStorage.removeItem('user')
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const token = this.token
    
    // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏ –°–†–ê–ó–£
    this.token = null
    this.refreshToken = null
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ (–Ω–µ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞)
    if (token) {
      fetch(`${this.baseURL}/auth/logout`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      }).catch((error) => {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ - —Ç–æ–∫–µ–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è):', error)
      })
    }
  }

  // –ó–∞–∫–∞–∑—ã
  async getOrders(params?: {
    page?: number
    limit?: number
    status?: string
    city?: string
    search?: string
    master?: string
  }) {
    const searchParams = new URLSearchParams()
    if (params?.page) searchParams.append('page', params.page.toString())
    if (params?.limit) searchParams.append('limit', params.limit.toString())
    if (params?.status) searchParams.append('status', params.status)
    if (params?.city) searchParams.append('city', params.city)
    if (params?.search) searchParams.append('search', params.search)
    if (params?.master) searchParams.append('master', params.master)

    const query = searchParams.toString()
    return this.request<any>(`/orders${query ? `?${query}` : ''}`)
  }

  async getOrderById(id: string) {
    return this.request<any>(`/orders/${id}`)
  }

  async getCallsByOrderId(orderId: string) {
    return this.request<any[]>(`/calls/order/${orderId}`)
  }

  async createOrder(orderData: any) {
    return this.request<any>('/orders', {
      method: 'POST',
      body: JSON.stringify(orderData),
    })
  }

  async updateOrder(id: string, orderData: any) {
    return this.request<any>(`/orders/${id}`, {
      method: 'PUT',
      body: JSON.stringify(orderData),
    })
  }

  async deleteOrder(id: string) {
    return this.request<any>(`/orders/${id}`, {
      method: 'DELETE',
    })
  }

  async getMasterStatistics(params?: {
    startDate?: string
    endDate?: string
  }) {
    const searchParams = new URLSearchParams()
    if (params?.startDate) searchParams.append('startDate', params.startDate)
    if (params?.endDate) searchParams.append('endDate', params.endDate)

    const query = searchParams.toString()
    return this.request<any[]>(`/reports/statistics/master${query ? `?${query}` : ''}`)
  }

  async getMasterProfile() {
    return this.request<any>('/masters/profile')
  }

  // –ú–∞—Å—Ç–µ—Ä–∞ (Users Service)
  async getMasters(city?: string) {
    const url = city ? `/masters?city=${encodeURIComponent(city)}` : '/masters'
    const response = await this.request<any>(url)
    return response.data || []
  }
  
  async getCurrentUser() {
    try {
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      if (!this.token) return null
      
      const base64Url = this.token.split('.')[1]
      if (!base64Url) return null
      
      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')
      const jsonPayload = decodeURIComponent(
        atob(base64)
          .split('')
          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
          .join('')
      )
      
      return JSON.parse(jsonPayload)
    } catch (error) {
      logger.error('Error decoding token', error)
      return null
    }
  }

  async getMasterById(id: string) {
    const response = await this.request<any>(`/masters/${id}`)
    return response.data
  }

  // –ö–∞—Å—Å–∞ (Cash Service)
  async getCashRecords(params?: {
    page?: number
    limit?: number
    status?: string
  }) {
    const searchParams = new URLSearchParams()
    if (params?.status) searchParams.append('status', params.status)

    const query = searchParams.toString()
    const response = await this.request<any>(`/cash${query ? `?${query}` : ''}`)
    return response.data || []
  }

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  async getUsers() {
    return this.request<any[]>('/users')
  }

  // –°–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É (Cash Service - Handover)
  async getMasterCashSubmissions(params?: {
    status?: string
    page?: number
    limit?: number
  }) {
    const searchParams = new URLSearchParams()
    if (params?.status) searchParams.append('status', params.status)

    const query = searchParams.toString()
    const response = await this.request<any>(`/handover${query ? `?${query}` : ''}`)
    return response
  }

  async submitCashForReview(orderId: number, receiptFile?: File) {
    try {
      console.log('=== submitCashForReview START ===')
      console.log('Order ID:', orderId)
      console.log('Receipt File:', receiptFile)
      
      let cashReceiptDoc: string | undefined

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª - –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –≤ S3 —á–µ—Ä–µ–∑ files-service
      if (receiptFile) {
        console.log('Uploading file to S3...')
        console.log('File name:', receiptFile.name)
        console.log('File size:', receiptFile.size)
        console.log('File type:', receiptFile.type)
        
        const formData = new FormData()
        formData.append('file', receiptFile)

        const uploadUrl = `${this.baseURL}/files/upload?folder=director/cash/cashreceipt_doc`
        console.log('Upload URL:', uploadUrl)

        // –£–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —á–µ–∫–æ–≤
        const uploadResponse = await fetch(uploadUrl, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${this.token}`,
          },
          body: formData,
        })

        console.log('Upload response status:', uploadResponse.status)

        if (!uploadResponse.ok) {
          const errorText = await uploadResponse.text()
          console.error('Upload failed:', errorText)
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${uploadResponse.status}`)
        }

        const uploadResult = await uploadResponse.json()
        console.log('Upload result:', uploadResult)
        
        if (uploadResult.success && uploadResult.data?.key) {
          cashReceiptDoc = uploadResult.data.key
          console.log('‚úÖ File uploaded to S3:', cashReceiptDoc)
        } else {
          console.warn('‚ö†Ô∏è No key in upload result')
        }
      } else {
        console.log('No file to upload')
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ orders-service
      console.log('Submitting cash to orders-service...')
      console.log('cashReceiptDoc:', cashReceiptDoc)
      
      const result = await this.request(`/orders/${orderId}/submit-cash`, {
        method: 'PATCH',
        body: JSON.stringify({
          cashReceiptDoc,
        }),
      })
      
      console.log('Submit result:', result)
      console.log('=== submitCashForReview END ===')
      
      return result
    } catch (error) {
      console.error('‚ùå Error in submitCashForReview:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–¥–∞—á–∏'
      }
    }
  }

  // –°–æ–∑–¥–∞—Ç—å handover (—Å–¥–∞—á—É –º–∞—Å—Ç–µ—Ä–∞)
  async createHandover(data: {
    period: 'daily' | 'weekly' | 'monthly'
    periodStart: string
    periodEnd: string
    totalAmount: number
    totalOrders: number
    note?: string
  }) {
    return this.request('/handover', {
      method: 'POST',
      body: JSON.stringify(data),
    })
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–∞—Å—Ç–µ—Ä–∞
  async getMasterBalance(masterId: number) {
    const response = await this.request<any>(`/cash/balance/${masterId}`)
    return response.data
  }

  // –ê–≤–∏—Ç–æ API
  async getAvitoProfiles() {
    return this.request<any[]>('/avito/profiles')
  }

  async getAvitoChats(avitoName: string, params?: {
    limit?: number
    offset?: number
  }) {
    const searchParams = new URLSearchParams()
    if (params?.limit) searchParams.append('limit', params.limit.toString())
    if (params?.offset) searchParams.append('offset', params.offset.toString())

    const query = searchParams.toString()
    return this.request<any[]>(`/avito/${avitoName}/chats${query ? `?${query}` : ''}`)
  }

  async getAvitoChat(avitoName: string, chatId: string) {
    return this.request<any>(`/avito/${avitoName}/chats/${chatId}`)
  }

  async getAvitoChatMessages(avitoName: string, chatId: string, params?: {
    limit?: number
    offset?: number
  }) {
    const searchParams = new URLSearchParams()
    if (params?.limit) searchParams.append('limit', params.limit.toString())
    if (params?.offset) searchParams.append('offset', params.offset.toString())

    const query = searchParams.toString()
    return this.request<any[]>(`/avito/${avitoName}/chats/${chatId}/messages${query ? `?${query}` : ''}`)
  }

  async sendAvitoMessage(avitoName: string, chatId: string, text: string) {
    return this.request<any>(`/avito/${avitoName}/chats/${chatId}/messages`, {
      method: 'POST',
      body: JSON.stringify({ text }),
    })
  }

  async markAvitoChatAsRead(avitoName: string, chatId: string) {
    return this.request<any>(`/avito/${avitoName}/chats/${chatId}/read`, {
      method: 'POST',
    })
  }

  async getOrderAvitoChat(orderId: string) {
    return this.request<any>(`/orders/${orderId}/avito-chat`)
  }

  async openAvitoChat(orderId: string) {
    return this.request<any>(`/avito/orders/${orderId}/chat/open`, {
      method: 'POST',
    })
  }

  async uploadAvitoImage(avitoName: string, formData: FormData) {
    return this.request<any>(`/avito/${avitoName}/upload-images`, {
      method: 'POST',
      body: formData,
    })
  }

  async sendAvitoImageMessage(avitoName: string, chatId: string, imageId: string) {
    return this.request<any>(`/avito/${avitoName}/chats/${chatId}/image`, {
      method: 'POST',
      body: JSON.stringify({ image_id: imageId }),
    })
  }

  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Avito Messenger (–∫–∞–∫ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞)
  async getAvitoMessages(chatId: string, avitoAccountName: string, limit: number = 100): Promise<any[]> {
    const response = await fetch(`${this.baseURL}/avito-messenger/chats/${chatId}/messages?avitoAccountName=${avitoAccountName}&limit=${limit}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${this.token}`,
        'Content-Type': 'application/json',
      },
    })

    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π')
    }

    const result = await response.json()
    return result.data?.messages || []
  }

  async sendAvitoMessageNew(chatId: string, text: string, avitoAccountName: string): Promise<any> {
    const response = await fetch(`${this.baseURL}/avito-messenger/chats/${chatId}/messages`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ text, avitoAccountName }),
    })

    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')
    }

    const result = await response.json()
    return result.data
  }

  async markAvitoChatAsReadNew(chatId: string, avitoAccountName: string): Promise<void> {
    const response = await fetch(`${this.baseURL}/avito-messenger/chats/${chatId}/read`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ avitoAccountName }),
    })

    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —á–∞—Ç–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ')
    }
  }

  async uploadFile(file: File, folder?: string): Promise<any> {
    const formData = new FormData()
    formData.append('file', file)

    let url = `${this.baseURL}/files/upload`
    if (folder) {
      url += `?folder=${encodeURIComponent(folder)}`
    }

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.token}`,
      },
      body: formData,
    })

    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞')
    }

    const result = await response.json()
    return result
  }
}

export const apiClient = new ApiClient(API_BASE_URL)
export default apiClient
